"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[851],{1248:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-5f7bec84",path:"/frame/vue/vue3/ref.html",title:"ref",lang:"en-US",frontmatter:{categories:["frame","vue","vue3"]},excerpt:"",headers:[{level:2,title:"直接赋值问题",slug:"直接赋值问题",children:[{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"对象",slug:"对象",children:[]}]},{level:2,title:"与 reactive 的区别",slug:"与-reactive-的区别",children:[]}]}},6504:(e,n,a)=>{a.r(n),a.d(n,{default:()=>r});const s=(0,a(6252).uE)('<h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h1><ul><li>ref 返回一个 Ref 类型的数据</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let headData: Ref&lt;DataType[]&gt; = ref([]);\nlet data = ref({});\nheadData.value = [\n  {\n    data: &quot;121w&quot;,\n    note: &quot;总播放量&quot;,\n  },\n];\ndata.value = { a: 2 };\nreturn { headData, data };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="直接赋值问题" tabindex="-1"><a class="header-anchor" href="#直接赋值问题" aria-hidden="true">#</a> 直接赋值问题</h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>使用 ref 创建的数据直接进行=赋值是可以响应视图的</li><li>而使用 reactive 不可以</li><li>数组不设定类型的话，添加数据会报类型错误 <ul><li>并且要是一个 Ref 类型</li></ul></li></ul><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><ul><li>对象使用 data.value 赋值时 ts 不会报类型错误</li><li>直接对 data 使用=赋值则会报类型错误</li></ul><h2 id="与-reactive-的区别" tabindex="-1"><a class="header-anchor" href="#与-reactive-的区别" aria-hidden="true">#</a> 与 reactive 的区别</h2><ul><li>使用 ref 创建对象无法被 watch 监控到</li><li>想要被 watch 监控需要获取 value</li><li>想要监控到具体的值时需要使用函数返回值</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>const objRef = ref({ id: 0 });\nconst objReactive = reactive({ id: 0 });\n\n// 无法监控到\nwatch(objRef, (newVal) =&gt; {\n  console.log(newVal);\n});\n// 可以监控到\nwatch(objRef.value, (newVal) =&gt; {\n  console.log(newVal);\n});\n// 可以监控到\nwatch(objReactive, (newVal) =&gt; {\n  console.log(newVal);\n});\n// 监控具体到值\nwatch(\n  () =&gt; objReactive.id,\n  (newVal) =&gt; {\n    console.log(newVal);\n  }\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',11),l={},r=(0,a(3744).Z)(l,[["render",function(e,n){return s}]])},3744:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}}}]);