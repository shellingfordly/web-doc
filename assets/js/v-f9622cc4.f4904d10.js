"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[4239],{7490:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-f9622cc4",path:"/web/optimize/",title:"前端优化",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"首屏优化",slug:"首屏优化",children:[{level:3,title:"计算首屏加载时间",slug:"计算首屏加载时间",children:[]}]}],filePathRelative:"web/optimize/index.md",git:{updatedTime:1663579823e3,contributors:[{name:"shellingfordly",email:"shellingfordly@qq.com",commits:1}]}}},806:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});const t=(0,s(6252).uE)('<h1 id="前端优化" tabindex="-1"><a class="header-anchor" href="#前端优化" aria-hidden="true">#</a> 前端优化</h1><h2 id="首屏优化" tabindex="-1"><a class="header-anchor" href="#首屏优化" aria-hidden="true">#</a> 首屏优化</h2><h3 id="计算首屏加载时间" tabindex="-1"><a class="header-anchor" href="#计算首屏加载时间" aria-hidden="true">#</a> 计算首屏加载时间</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 方案一：</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;first contentful painting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 方案二：</span>\nperformance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span><span class="token string">&quot;first-contentful-paint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startTime\n​\n<span class="token comment">// performance.getEntriesByName(&quot;first-contentful-paint&quot;)[0]</span>\n<span class="token comment">// 会返回一个 PerformancePaintTiming的实例，结构如下：</span>\nPerformancePaintTiming <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;first-contentful-paint&quot;</span><span class="token punctuation">,</span>\n  entryType<span class="token operator">:</span> <span class="token string">&quot;paint&quot;</span><span class="token punctuation">,</span>\n  startTime<span class="token operator">:</span> <span class="token number">507.80000002123415</span><span class="token punctuation">,</span>\n  duration<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="performance-timing" tabindex="-1"><a class="header-anchor" href="#performance-timing" aria-hidden="true">#</a> performance.timing</h4><ol><li>DNS 解析耗时: domainLookupEnd - domainLookupStart</li><li>TCP 连接耗时: connectEnd - connectStart</li><li>SSL 安全连接耗时: connectEnd - secureConnectionStart</li><li>网络请求耗时(TTFB): responseStart - requestStart</li><li>数据传输耗时: responseEnd - responseStart</li><li>DOM 解析耗时: domInteractive - responseEnd</li><li>资源加载耗时: loadEventStart - domContentLoadedEventEnd</li><li>首包时间: responseStart - domainLookupStart</li><li>首次渲染时间 / 白屏时间: responseEnd - fetchStart</li><li>首次可交互时间: domInteractive - fetchStart</li><li>DOM Ready 时间: domContentLoadEventEnd - fetchStart</li><li>页面完全加载时间: loadEventStart - fetchStart</li></ol><h4 id="加载慢的原因" tabindex="-1"><a class="header-anchor" href="#加载慢的原因" aria-hidden="true">#</a> 加载慢的原因</h4><ul><li>网络延时问题</li><li>资源文件体积是否过大</li><li>资源是否重复发送请求去加载了</li><li>加载脚本的时候，渲染内容堵塞了</li></ul><h4 id="优化方法" tabindex="-1"><a class="header-anchor" href="#优化方法" aria-hidden="true">#</a> 优化方法</h4><ol><li>常见的几种 SPA 首屏优化方式</li></ol><ul><li>减小入口文件体积 <ul><li>路由懒加载 <ul><li>Vue: 箭头函数 + import</li><li>React: React.Lazy</li></ul></li><li>静态资源引入 CDN</li></ul></li><li>静态资源本地缓存</li><li>UI 框架按需加载</li><li>图片资源的压缩</li><li>组件重复打包</li><li>开启 GZip 压缩</li><li>使用 SSR</li></ul><ol start="2"><li>静态资源本地缓存</li></ol><ul><li>采用 HTTP 缓存，设置 Cache-Control，Last-Modified，Etag 等响应头</li><li>采用 Service Worker 离线缓存</li></ul><ol start="3"><li><p>UI 框架按需加载</p></li><li><p>图片资源的压缩</p></li><li><p>组件重复打包</p></li><li><p>开启 GZip 压缩</p></li><li><p>使用 SSR</p></li><li><p>运行时优化</p></li></ol><ul><li>减少重绘与重排</li><li>避免页面卡顿</li><li>长列表优化</li><li>滚动事件性能优化</li><li>使用 Web Workers</li><li>写代码时的优化点</li></ul>',15),e={},l=(0,s(3744).Z)(e,[["render",function(n,a){return t}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);