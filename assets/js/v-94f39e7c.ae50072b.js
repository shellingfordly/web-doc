"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[214],{2751:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-94f39e7c",path:"/pages/95f2bc/",title:"ts",lang:"en-US",frontmatter:{title:"ts",date:"2021-11-25T14:02:23.000Z",permalink:"/pages/95f2bc/",categories:["web","javascript","js"],tags:[null]},excerpt:"",headers:[{level:2,title:"快速入门",slug:"快速入门",children:[{level:3,title:"public",slug:"public",children:[]},{level:3,title:"null 和 undefined",slug:"null-和-undefined",children:[]}]},{level:2,title:"基础类型",slug:"基础类型",children:[{level:3,title:"元组 Tuple",slug:"元组-tuple",children:[]},{level:3,title:"枚举",slug:"枚举",children:[]},{level:3,title:"空值",slug:"空值",children:[]},{level:3,title:"Never",slug:"never",children:[]},{level:3,title:"类型断言",slug:"类型断言",children:[]}]},{level:2,title:"接口",slug:"接口",children:[{level:3,title:"可选属性",slug:"可选属性",children:[]},{level:3,title:"只读属性",slug:"只读属性",children:[]},{level:3,title:"额外的属性检查",slug:"额外的属性检查",children:[]}]},{level:2,title:"类型推导",slug:"类型推导",children:[]},{level:2,title:"一些属性",slug:"一些属性",children:[]},{level:2,title:"问题",slug:"问题",children:[{level:3,title:"declare",slug:"declare",children:[]}]},{level:2,title:"函数类型定义",slug:"函数类型定义",children:[]},{level:2,title:"Utility Types",slug:"utility-types",children:[{level:3,title:"Record<Keys,Type>",slug:"record-keys-type",children:[]},{level:3,title:"Pick<Type,Keys>",slug:"pick-type-keys",children:[]}]},{level:2,title:"& |",slug:"",children:[]},{level:2,title:"几个关键字",slug:"几个关键字",children:[]},{level:2,title:"不理解",slug:"不理解",children:[{level:3,title:"readonly",slug:"readonly",children:[]},{level:3,title:"ReturnType",slug:"returntype",children:[]},{level:3,title:"接口定义",slug:"接口定义",children:[]}]}]}},2206:(e,n,s)=>{s.r(n),s.d(n,{default:()=>r});const a=(0,s(6252).uE)('<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>在构造函数中使用 public 是一种简写形式，它将会自动为类的实例创建该名称的属性</p><h3 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> null 和 undefined</h3><ul><li>在严格空检查模式中，除了 undefined 之外的所有类型的局部变量在使用之前都必须先赋值</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let x: number; // 错误，使用前未赋值\nlet y: number | null; // 错误，使用前未赋值\nlet z: number | undefined; // 正确\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h2><h3 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple" aria-hidden="true">#</a> 元组 Tuple</h3><p>元组类型允许表示一个已知元素数量和类型的数组</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let x: [string, number];\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当访问一个已知索引的元素，会得到正确的类型：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>console.log(x[1].substr(1)); // Error\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当访问一个越界的元素，会使用联合类型替代：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>x[6] = true; // Error, 布尔不是(string | number)类型\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h3><p>默认情况下，从 0 开始为元素编号</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Color {\n  Red,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\nColor.Red; // 0\nColor[1]; // Green\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>手动的指定成员的数值</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Color {\n  Red = 1,\n  Green,\n  Blue,\n}\nColor.Red; // 1\nColor[1]; // red\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h3><p>viod 与 any 相反，表示没有任何类型。当函数没有返回值时，void 类型的变量值只能为 undefined 和 null</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function warnUser(): void {}\nlet unusable1: void = undefined;\nlet unusable2: void = null;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> Never</h3><p>表示永不存在的值的类型。比如总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型</p><ul><li>never 类型是任何类型的子类型，也可以赋值给任何类型</li><li>没有类型是 never 的子类型或可以赋值给 never 类型</li><li>除了 never 本身之外，any 也不可以赋值给 never</li></ul><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><p>在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let someValue: any = &quot;this is a string&quot;;\nlet strLength1: number = (&lt;string&gt;someValue).length;\nlet strLength2: number = (someValue as string).length;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><h3 id="可选属性" tabindex="-1"><a class="header-anchor" href="#可选属性" aria-hidden="true">#</a> 可选属性</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface SquareConfig {\n  color?: string;\n  width?: number;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性" aria-hidden="true">#</a> 只读属性</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Point {\n  readonly x: number;\n  readonly y: number;\n}\n// 赋值后， x和y再也不能被改变了\nlet p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="readonlyarray-t-类型" tabindex="-1"><a class="header-anchor" href="#readonlyarray-t-类型" aria-hidden="true">#</a> ReadonlyArray&lt;T&gt;类型</h4><p>确保数组创建后再也不能被修改</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray&lt;number&gt; = a;\nro.push(5); // error!\na = ro; // error!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以使用断言重写</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>a = ro as number[];\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>作为常量使用的话用 const 作为对象的不可变属性则使用 readonly</p><h3 id="额外的属性检查" tabindex="-1"><a class="header-anchor" href="#额外的属性检查" aria-hidden="true">#</a> 额外的属性检查</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface SquareConfig {\n  color?: string;\n  width?: number;\n}\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  // ...\n}\nlet mySquare = createSquare({ colour: &quot;red&quot;, width: 100 });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="类型推导" tabindex="-1"><a class="header-anchor" href="#类型推导" aria-hidden="true">#</a> 类型推导</h2><p>当有 sheq 确定值的时候不需要设置类型，ts 会根据值自动推导类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>const person = {\n  name: &quot;&quot;,\n  age: &quot;&quot;,\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="一些属性" tabindex="-1"><a class="header-anchor" href="#一些属性" aria-hidden="true">#</a> 一些属性</h2><ul><li>keyof 使用 interface 的 key 做类型</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age: number;\n  location: string;\n}\n\ntype K1 = keyof Person; // &quot;name&quot; | &quot;age&quot; | &quot;location&quot;\ntype K2 = keyof Person[]; // &quot;length&quot; | &quot;push&quot; | &quot;pop&quot; | &quot;concat&quot; | ...\ntype K3 = keyof { [x: string]: Person }; // string\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>declare function f(x: number): string;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="函数类型定义" tabindex="-1"><a class="header-anchor" href="#函数类型定义" aria-hidden="true">#</a> 函数类型定义</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type Func = () =&gt; void;\ntype Func = (xx: any) =&gt; void;\ntype Func = (xx: any) =&gt; any;\n\ntype Func = {\n  (): any;\n};\n\ntype XXX = {\n  a(): string;\n  b: () =&gt; string;\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="utility-types" tabindex="-1"><a class="header-anchor" href="#utility-types" aria-hidden="true">#</a> Utility Types</h2><ul><li>Partial&lt;Type&gt;</li><li>Requi0red&lt;Type&gt;</li><li>Readonly&lt;Type&gt;</li><li>Record&lt;Keys,Type&gt; 记录</li><li>Pick&lt;Type, Keys&gt; 挑选</li><li>Omit&lt;Type, Keys&gt; 忽略</li><li>Exclude&lt;Type, ExcludedUnion&gt; 排除</li><li>Extract&lt;Type, Union&gt; 提取</li><li>NonNullable&lt;Type&gt; 排除 null 和 undefined</li><li>Parameters&lt;Type&gt; 参数面板</li><li>ConstructorParameters&lt;Type&gt; 构造器参数</li><li>ReturnType&lt;Type&gt; 返回值类型</li><li>InstanceType&lt;Type&gt; 实例类型</li><li>ThisParameterType&lt;Type&gt;</li><li>OmitThisParameter&lt;Type&gt;</li><li>ThisType&lt;Type&gt;</li></ul><h3 id="record-keys-type" tabindex="-1"><a class="header-anchor" href="#record-keys-type" aria-hidden="true">#</a> Record&lt;Keys,Type&gt;</h3><p>构建一个对象类型，键名为 keys，键值为 Type</p><h3 id="pick-type-keys" tabindex="-1"><a class="header-anchor" href="#pick-type-keys" aria-hidden="true">#</a> Pick&lt;Type,Keys&gt;</h3><p>从 Type 中选一组属性键构成一个类型</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> &amp; |</h2><ul><li>&amp;</li><li>|</li></ul><h2 id="几个关键字" tabindex="-1"><a class="header-anchor" href="#几个关键字" aria-hidden="true">#</a> 几个关键字</h2><ol><li>infer</li><li>typeof</li><li>keyof <ul><li>获取某对象的键名</li></ul></li><li>in</li></ol><h2 id="不理解" tabindex="-1"><a class="header-anchor" href="#不理解" aria-hidden="true">#</a> 不理解</h2><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly" aria-hidden="true">#</a> readonly</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type Mutable&lt;T&gt; = {\n  -readonly [P in keyof T]: T[P];\n};\n// 可以理解为\ntype Mutable&lt;Obj&gt; = {\n  -readonly [Obj in keyof Key]: Obj[Key];\n};\n\ntype Readonly&lt;T&gt; = { readonly [P in keyof T]: T[P] };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="returntype" tabindex="-1"><a class="header-anchor" href="#returntype" aria-hidden="true">#</a> ReturnType</h3><ol><li>得到一个函数的返回值类型</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type ReturnType&lt;T extends (...args: any[]) =&gt; any&gt; = T extends (\n  ...args: any[]\n) =&gt; infer R\n  ? R\n  : any;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>用 ReturnType 获取到 Func 的返回值类型</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type Func = (value: number) =&gt; string;\n\n// 拿到某个函数返回指的类型\nconst foo: ReturnType&lt;Func&gt; = &quot;1&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>例子</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function fn() {\n  return {\n    name: &quot;&quot;,\n  };\n}\n\nconst obj: ReturnType&lt;typeof fn&gt; = {\n  name: &quot;&quot;,\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="接口定义" tabindex="-1"><a class="header-anchor" href="#接口定义" aria-hidden="true">#</a> 接口定义</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Seal {\n  name: string;\n  url: string;\n}\ninterface API {\n  &quot;/user&quot;: { name: string; age: number; phone: string };\n  &quot;/seals&quot;: { seal: Seal[] };\n}\nconst api = &lt;URL extends keyof API&gt;(url: URL): Promise&lt;API[URL]&gt; =&gt; {\n  return fetch(url).then((res) =&gt; res.json());\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',75),l={},r=(0,s(3744).Z)(l,[["render",function(e,n){return a}]])},3744:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}}}]);