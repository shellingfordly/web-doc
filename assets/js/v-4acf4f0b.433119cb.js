"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[485],{2995:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-4acf4f0b",path:"/frame/vue/vue3/case.html",title:"对新特性的实际应用",lang:"en-US",frontmatter:{categories:["frame","vue","vue3"]},excerpt:"",headers:[{level:2,title:"hook 形式使用弹窗组件",slug:"hook-形式使用弹窗组件",children:[{level:3,title:"MyDrawer.vue",slug:"mydrawer-vue",children:[]},{level:3,title:"useDialog.ts",slug:"usedialog-ts",children:[]},{level:3,title:"home.vue",slug:"home-vue",children:[]},{level:3,title:"TestDialog.vue",slug:"testdialog-vue",children:[]}]}]}},8137:(n,s,e)=>{e.r(s),e.d(s,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="对新特性的实际应用" tabindex="-1"><a class="header-anchor" href="#对新特性的实际应用" aria-hidden="true">#</a> 对新特性的实际应用</h1><h2 id="hook-形式使用弹窗组件" tabindex="-1"><a class="header-anchor" href="#hook-形式使用弹窗组件" aria-hidden="true">#</a> hook 形式使用弹窗组件</h2><p>vue3 新增了 composition api 之后，组件功能的拆分更加方便了，下面使用这种方式来编写弹窗组件，抽屉同理。</p><h3 id="mydrawer-vue" tabindex="-1"><a class="header-anchor" href="#mydrawer-vue" aria-hidden="true">#</a> MyDrawer.vue</h3><p>首先，自定义一个 dialog 组件。此组件内部暴露控制弹窗显隐的方法、和设置属性的方法，getCurrentInstance 是 vue 提供的获取组件实例的方法，具体代码如下———</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;template&gt;\n  &lt;el-dialog\n    :before-close=&quot;()=&gt;{ actionDialog(false) }&quot;\n    v-model=&quot;visible&quot;\n    v-bind=&quot;getProps&quot;\n  &gt;\n    &lt;template #[item]=&quot;data&quot; v-for=&quot;item in Object.keys($slots, &#39;default&#39;)&quot;&gt;\n      &lt;slot :name=&quot;item&quot; v-bind=&quot;data&quot;&gt;&lt;/slot&gt;\n    &lt;/template&gt;\n  &lt;/el-dialog&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  reactive,\n  ref,\n} from &quot;vue&quot;;\n\nexport default defineComponent({\n  name: &quot;&quot;,\n  setup(props, { emit }) {\n    const visible = ref(false);\n    const propsRef = reactive({\n      visible: false,\n      title: undefined,\n    });\n    const getProps = computed(() =&gt; {\n      return Object.assign(propsRef, props);\n    });\n\n    const dialogInstance = {\n      actionDialog,\n      setProps,\n    };\n\n    const instance = getCurrentInstance();\n\n    if (instance) {\n      emit(&quot;register&quot;, dialogInstance);\n    }\n\n    function actionDialog(isShow: boolean) {\n      visible.value = isShow;\n    }\n\n    function setProps(propsValue: any) {\n      Object.assign(propsRef || {}, propsValue);\n    }\n\n    return {\n      visible,\n      getProps,\n      actionDialog,\n    };\n  },\n});\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="usedialog-ts" tabindex="-1"><a class="header-anchor" href="#usedialog-ts" aria-hidden="true">#</a> useDialog.ts</h3><p>除了自定义组件内部需要做一些处理之外，还需要提供一个暴露一些操作弹窗方法的 useDialog 方法，这就是常说的 hook 函数吧。此处暴露一个 register 方法，在使用时该方法需要绑定在自定义 dialog 组件上。当创建了 dialog 组件后，就会触发 register 方法，将 dialog 实例和内部提供的方法传递出来，然后在父组件中使用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { ref, unref } from &quot;@vue/reactivity&quot;;\nimport { isInSetup } from &quot;/@/utils/help/vue&quot;;\nimport { DialogPropsModel, ResultModel, MethodsModel } from &quot;./types&quot;;\n\nexport function useDialog(props?: DialogPropsModel): ResultModel {\n  // 监测是否在setup里面调用\n  isInSetup();\n\n  const instanceRef = ref();\n  const uuidRef = ref();\n\n  function register(dialogInstance: any, uuid: string) {\n    instanceRef.value = dialogInstance;\n    uuidRef.value = uuid;\n\n    props &amp;&amp; methods.setProps(props);\n  }\n\n  const getInstance = () =&gt; {\n    const instance = unref(instanceRef);\n    if (!instance) {\n      console.error(&quot;useModal instance is undefined!&quot;);\n    }\n    return instance;\n  };\n\n  const methods: MethodsModel = {\n    actionDialog(open = true) {\n      getInstance()?.actionDialog(open);\n    },\n    setProps(props: any) {\n      getInstance()?.setProps(props);\n    },\n  };\n\n  return [register, methods];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="home-vue" tabindex="-1"><a class="header-anchor" href="#home-vue" aria-hidden="true">#</a> home.vue</h3><p>具体使用时，在父组件中调用对应的 TestDialog 组件，然后使用 useDialog 函数暴露出 register 注册函数和 actionDialog 操作显隐的函数，将 register 绑定到 TestDialog 上，这样当组件被创建时，就会触发 emit 暴露方法再通过 useDialog 返回出来，也就是 actionDialog 函数，绑定对应的触发 Dom 上就 OK 了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-button @click=&quot;actionDialog()&quot;&gt;open dialog&lt;/el-button&gt;\n    &lt;TestDialog @register=&quot;register&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from &quot;vue&quot;;\nimport { userStore } from &quot;/@/store/modules/user&quot;;\nimport TestDialog from &quot;/@/components/TestDialog.vue&quot;;\nimport { useDialog } from &quot;/@/components/dialog/useDialog&quot;;\n\nexport default defineComponent({\n  components: { MyDrawer },\n  setup() {\n    const [register, { actionDialog }] = useDialog({ title: &quot;Dialog&quot; });\n    return {\n      register,\n      actionDialog,\n    };\n  },\n});\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="testdialog-vue" tabindex="-1"><a class="header-anchor" href="#testdialog-vue" aria-hidden="true">#</a> TestDialog.vue</h3><p>TestDialog 组件中只需要调用 MyDialog 并使用 v-bind=&quot;$attrs&quot;将所有的属性和事件传递给 MyDialog 就可以了。然后就可以在 MyDialog 中编写弹窗内显示的内容。弹窗的属性可以通过 useDialog 传递，也可以直接在 TestDialog 中编写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;template&gt;\n  &lt;MyDialog v-bind=&quot;$attrs&quot;&gt;\n    这是弹窗内部的内容！\n  &lt;/MyDialog&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from &quot;vue&quot;;\nimport MyDialog from &quot;/@/components/dialog/MyDialog.vue&quot;;\n\nexport default defineComponent({\n  name: &quot;TestDrawer&quot;,\n  components: { MyDialog },\n  setup() {\n    return {};\n  },\n});\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>弹窗代码的拆解，hook 形式的代码就完成了。实现了设置 dialog 属性和设置显示隐藏的简单功能。这样拆解之后，减少了 Home 组件内部弹窗的 template 代码，可以随意的将属性在 js 中或者子组件中进行设置。虽然功能不复杂，但编写起来舒服了很多，否则 Home 组件中调用 element 原生的 dialog 组件的话，需要在 template 传递很多属性。如果直接抽离的话又需要在子组件中监听显隐变量，父组件监听显隐事件，写了很多与数据不相关的代码，代码看起来也不那么请爽。</p>',16),l={},r=(0,e(3744).Z)(l,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);