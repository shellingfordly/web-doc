"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[9462],{1449:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-009086b1",path:"/pages/9ae9ca/",title:"README",lang:"en-US",frontmatter:{sidebar:"auto",title:"README",date:"2021-11-25T10:15:07.000Z",permalink:"/pages/9ae9ca/",categories:["web","http"],tags:[null]},excerpt:"",headers:[{level:2,title:"URL 通信过程",slug:"url-通信过程",children:[{level:3,title:"密钥",slug:"密钥",children:[]},{level:3,title:"HTTPS 四次握手",slug:"https-四次握手",children:[]}]},{level:2,title:"请求状态码",slug:"请求状态码",children:[{level:3,title:"100",slug:"_100",children:[]},{level:3,title:"200",slug:"_200",children:[]},{level:3,title:"300",slug:"_300",children:[]},{level:3,title:"400",slug:"_400",children:[]},{level:3,title:"500",slug:"_500",children:[]}]},{level:2,title:"中断请求",slug:"中断请求",children:[{level:3,title:"AbortController 中断请求",slug:"abortcontroller-中断请求",children:[]},{level:3,title:"中断 Fetch 请求",slug:"中断-fetch-请求",children:[]},{level:3,title:"中断 axios 请求",slug:"中断-axios-请求",children:[]},{level:3,title:"中断 umi-request 请求",slug:"中断-umi-request-请求",children:[]}]}],filePathRelative:"web/http/README.md",git:{updatedTime:1644391255e3,contributors:[{name:"liu",email:"shellingfordly@qq.com",commits:1}]}}},2416:(n,a,s)=>{s.r(a),s.d(a,{default:()=>b});var e=s(6252);const t=(0,e.uE)('<h1 id="http-相关学习" tabindex="-1"><a class="header-anchor" href="#http-相关学习" aria-hidden="true">#</a> HTTP 相关学习</h1><h2 id="url-通信过程" tabindex="-1"><a class="header-anchor" href="#url-通信过程" aria-hidden="true">#</a> URL 通信过程</h2><p>TCP 三次握手：客户端向服务器发送一个请求，服务器返回接受到客户端请求的回应，客户端再发送请求告诉服务器接受到服务器回应的请求； 四次分手：客户端向服务器发送分手请求，服务器回应客户端接受到客户端的请求；服务器向客户端回应分手请求，客户端发生请求告诉服务器收到了分手回应</p><h3 id="密钥" tabindex="-1"><a class="header-anchor" href="#密钥" aria-hidden="true">#</a> 密钥</h3><ul><li>对称密钥：客户端和服务器需要有相同的密钥才能解密信息</li><li>非对称密钥： <ul><li>公钥加密，私钥解密；私钥加密，公钥解密</li><li>非对称密钥只能保证单向传输的安全</li></ul></li></ul><p>网络传输安全： 系统内置有证书，是通过官方平台对域名的认证，在服务器中写入（第三方私钥等？）特定的文件，第三方的公钥客户端都有，第三方的公钥对服务器的公钥以及其他信息进行加密。</p><p>客户端发送的使用服务器公钥加密的信息传个服务器，中间的代理也有公钥，但是无法解密信息，服务器使用私钥解密信息，向客户端返回结果，此时中间的代理可以通过公钥看到返回结果，但是不能修改。</p><p>客户端第一次使用公钥加密自己随机生成的一串密钥，发送给服务器，此时中间代理拥有的公钥无法查看，服务器使用私钥解密客户端的密钥，使用客户端的密钥加密返回结果，此时中间代理也无法查看到返回结果。</p><h3 id="https-四次握手" tabindex="-1"><a class="header-anchor" href="#https-四次握手" aria-hidden="true">#</a> HTTPS 四次握手</h3><ul><li>第一次握手 <ul><li>客户端向服务器发送一个随机数 clientKey</li><li>客户端发送 SSL 协议版本</li><li>客户端发送 可选的加密算法</li><li>客户端发送 可选的压缩算法</li></ul></li><li>第二次握手 <ul><li>服务端向客户端发送 随机数 server key</li><li>服务端向客户端发送 选择的压缩算法</li><li>服务端向客户端发送 选择的加密算法</li><li>服务端发送数字证书(包含公钥)</li></ul></li><li>第三次握手（前置操作：判断服务端的证书是否合法） <ul><li>客户端发送第三个随机数 premaster key</li><li>使用 3 个 key 来生成会话用的对称密钥。</li><li>客户端通知编码变更：接下来会话都会加密。</li><li>客户端发送握手结束通知（一条前面所有内容的 hash 值，供服务端校验）</li></ul></li><li>第四次握手 <ul><li>服务端接收到加密后的 premaster key, 用私钥解密，用三个 key 计算出会话用的对称密钥</li><li>通知编码变更</li><li>通知握手结束</li><li>发送 hash 值</li></ul></li></ul><hr><h2 id="请求状态码" tabindex="-1"><a class="header-anchor" href="#请求状态码" aria-hidden="true">#</a> 请求状态码</h2><h3 id="_100" tabindex="-1"><a class="header-anchor" href="#_100" aria-hidden="true">#</a> 100</h3><ul><li>100 Continue 继续。客户端应继续其请求</li><li>101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</li></ul><h3 id="_200" tabindex="-1"><a class="header-anchor" href="#_200" aria-hidden="true">#</a> 200</h3><ul><li>200 OK 请求成功。一般用于 GET 与 POST 请求</li><li>201 Created 已创建。成功请求并创建了新的资源</li><li>202 Accepted 已接受。已经接受请求，但未处理完成</li><li>203 Non-Authoritative Information 非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本</li><li>204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</li><li>205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</li><li>206 Partial Content 部分内容。服务器成功处理了部分 GET 请求</li></ul><h3 id="_300" tabindex="-1"><a class="header-anchor" href="#_300" aria-hidden="true">#</a> 300</h3><ul><li>300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</li><li>301 Moved Permanently 永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替</li><li>302 Found 临时移动。与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI</li><li>303 See Other 查看其它地址。与 301 类似。使用 GET 和 POST 请求查看</li><li>304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</li><li>305 Use Proxy 使用代理。所请求的资源必须通过代理访问</li><li>306 Unused 已经被废弃的 HTTP 状态码</li><li>307 Temporary Redirect 临时重定向。与 302 类似。使用 GET 请求重定向</li></ul><h3 id="_400" tabindex="-1"><a class="header-anchor" href="#_400" aria-hidden="true">#</a> 400</h3><ul><li>400 Bad Request 客户端请求的语法错误，服务器无法理解</li><li>401 Unauthorized 请求要求用户的身份认证</li><li>402 Payment Required 保留，将来使用</li><li>403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求</li><li>404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</li><li>405 Method Not Allowed 客户端请求中的方法被禁止</li><li>406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求</li><li>407 Proxy Authentication Required 请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权</li><li>408 Request Time-out 服务器等待客户端发送的请求时间过长，超时</li><li>409 Conflict 服务器完成客户端的 PUT 请求是可能返回此代码，服务器处理请求时发生了冲突</li><li>410 Gone 客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置</li><li>411 Length Required 服务器无法处理客户端发送的不带 Content-Length 的请求信息</li><li>412 Precondition Failed 客户端请求信息的先决条件错误</li><li>413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息</li><li>414 Request-URI Too Large 请求的 URI 过长（URI 通常为网址），服务器无法处理</li><li>415 Unsupported Media Type 服务器无法处理请求附带的媒体格式</li><li>416 Requested range not satisfiable 客户端请求的范围无效</li><li>417 Expectation Failed 服务器无法满足 Expect 的请求头信息</li></ul><h3 id="_500" tabindex="-1"><a class="header-anchor" href="#_500" aria-hidden="true">#</a> 500</h3><ul><li>500 Internal Server Error 服务器内部错误，无法完成请求</li><li>501 Not Implemented 服务器不支持请求的功能，无法完成请求</li><li>502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li>503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中</li><li>504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求</li><li>505 HTTP Version not supported 服务器不支持请求的 HTTP 协议的版本，无法完成处理</li></ul><hr><h2 id="中断请求" tabindex="-1"><a class="header-anchor" href="#中断请求" aria-hidden="true">#</a> 中断请求</h2>',24),p=(0,e.Uk)("原文章"),l={href:"https://juejin.cn/post/7033906910583586829?utm_source=gold_browser_extension#heading-2",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("掘金 - 紫圣"),c=(0,e._)("h3",{id:"abortcontroller-中断请求",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#abortcontroller-中断请求","aria-hidden":"true"},"#"),(0,e.Uk)(" AbortController 中断请求")],-1),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("AbortController"),u=(0,e.Uk)(" 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。"),k=(0,e.uE)('<h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h4><p>可以使用 AbortController() 构造函数创建一个新的 AbortController 。使用 AbortSignal 对象可以完成与与 DOM 请求的通信</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><p>AbortController.signal 返回一个 AbortSignal 对象实例，它可以用来 with/abort 一个 Web(网络)请求。</p><h4 id="abortcontroller-abort" tabindex="-1"><a class="header-anchor" href="#abortcontroller-abort" aria-hidden="true">#</a> AbortController.abort()</h4><p>中止一个尚未完成的 Web(网络)请求。这能够中止 fetch 请求，任何响应 Body 的消费者和流。</p><h3 id="中断-fetch-请求" tabindex="-1"><a class="header-anchor" href="#中断-fetch-请求" aria-hidden="true">#</a> 中断 Fetch 请求</h3><p>使用 AbortController 函数 new 一个控制器(controller)，将信号(controller.signal)传递到请求中，控制器与请求通过信号建立链接，便可以通过 controller.abort 方法给请求发送终止请求的信号</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>\n<span class="token comment">// 初始状态</span>\n<span class="token comment">// AbortSignal {aborted: false, onabort: null</span>\n\n<span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 中止状态</span>\n  <span class="token comment">// AbortSignal {aborted: true, onabort: null}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="中断-axios-请求" tabindex="-1"><a class="header-anchor" href="#中断-axios-请求" aria-hidden="true">#</a> 中断 axios 请求</h3><p>axios 中提供的 axios.CancelToken 可以很简单的中断请求</p><h4 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一</h4><p>使用 axios.CancelToken 创建一个 cancel token，将其传递给请求的 cancelToken 参数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span>\n<span class="token keyword">const</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naxios\n  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    cancelToken<span class="token operator">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsource<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&quot;中断请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二</h4><p>通过传递一个 executor 函数到 CancelToken 的构造函数来创建一个 cancel token</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span>\n<span class="token keyword">let</span> cancel<span class="token punctuation">;</span>\n\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  cancelToken<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncancel <span class="token operator">&amp;&amp;</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&quot;中断请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="中断-umi-request-请求" tabindex="-1"><a class="header-anchor" href="#中断-umi-request-请求" aria-hidden="true">#</a> 中断 umi-request 请求</h3><p>与 axios 差不多， 传递一个 executor 函数到 request.CancelToken 构造函数中创建一个 cancel token</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&quot;@/utils/request&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> CancelToken <span class="token operator">=</span> request<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span>\n<span class="token keyword">let</span> cancel<span class="token operator">:</span> any<span class="token punctuation">;</span>\n\n<span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  cancelToken<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 取消请求</span>\ncancel <span class="token operator">&amp;&amp;</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',20),d={},b=(0,s(3744).Z)(d,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",l,[o,(0,e.Wm)(s)])]),c,(0,e._)("p",null,[(0,e._)("a",i,[r,(0,e.Wm)(s)]),u]),k],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);