"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[14],{8161:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-a48e622a",path:"/frame/react/",title:"react",lang:"en-US",frontmatter:{sidebar:"auto",categories:["frame","react"]},excerpt:"",headers:[{level:2,title:"声明周期",slug:"声明周期",children:[]},{level:2,title:"setState",slug:"setstate",children:[]},{level:2,title:"key",slug:"key",children:[]},{level:2,title:"组件通信",slug:"组件通信",children:[{level:3,title:"父子通信",slug:"父子通信",children:[]},{level:3,title:"兄弟组件通信",slug:"兄弟组件通信",children:[]}]},{level:2,title:"CSSTransition",slug:"csstransition",children:[{level:3,title:"css 类名",slug:"css-类名",children:[]},{level:3,title:"TransitionGroup",slug:"transitiongroup",children:[]}]},{level:2,title:"脚手架",slug:"脚手架",children:[]},{level:2,title:"路由",slug:"路由",children:[{level:3,title:"NavLink 和 Route",slug:"navlink-和-route",children:[]},{level:3,title:"Redirect",slug:"redirect",children:[]},{level:3,title:"history",slug:"history",children:[]}]},{level:2,title:"Redux",slug:"redux",children:[]},{level:2,title:"react-redux",slug:"react-redux",children:[]},{level:2,title:"高阶组件",slug:"高阶组件",children:[{level:3,title:"反向继承",slug:"反向继承",children:[]}]},{level:2,title:"Hook 函数",slug:"hook-函数",children:[{level:3,title:"useState",slug:"usestate",children:[]},{level:3,title:"useRef",slug:"useref",children:[]},{level:3,title:"useEffect(()=>{ return }, [])",slug:"useeffect-return",children:[]},{level:3,title:"useReeducer(reducer, state)",slug:"usereeducer-reducer-state",children:[]},{level:3,title:"useMemo(()=>{ return }, [])",slug:"usememo-return",children:[]},{level:3,title:"useCallback",slug:"usecallback",children:[]},{level:3,title:"自定义 hook 函数",slug:"自定义-hook-函数",children:[]}]},{level:2,title:"Context",slug:"context",children:[{level:3,title:"useContext",slug:"usecontext",children:[]},{level:3,title:"contextType",slug:"contexttype",children:[]},{level:3,title:"Consumer",slug:"consumer",children:[]}]},{level:2,title:"性能优化",slug:"性能优化",children:[]},{level:2,title:"PureComponent",slug:"purecomponent",children:[]},{level:2,title:"组件库",slug:"组件库",children:[{level:3,title:"antd",slug:"antd",children:[]}]}]}},5509:(n,s,e)=>{e.r(s),e.d(s,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> react</h1><hr><h2 id="声明周期" tabindex="-1"><a class="header-anchor" href="#声明周期" aria-hidden="true">#</a> 声明周期</h2><h2 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate" aria-hidden="true">#</a> setState</h2><ul><li><p>异步</p></li><li><p>每次取到的值都是老的值</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>this.setState({\n  count: this.state.count + 1,\n});\nthis.setState({\n  count: this.state.count + 1,\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>每次获取到的都是最新值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>this.setState((state) =&gt; {\n  return { count: state.count + 1 };\n});\nthis.setState((state) =&gt; {\n  return { count: state.count + 1 };\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>改变的属性和改变前没有关系则使用对象，有关系则使用函数形式更好</li></ul><blockquote><p>官方说明：</p></blockquote><ol><li><p>updater 函数中接收的 state 和 props 都保证为最新。updater 的返回值会与 state 进行浅合并。</p></li><li><p>setState()的第二个参数为可选的回调函数，它将在 setState 完成合并并重新渲染组件后执行。通常，我们建议使用 componentDidUpdate() 来代替此方式。</p></li></ol><ul><li>在原生的事件函数/Promise/setTimeOut 中，setState 是同步的，并且不会合并处理</li></ul><h2 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h2><ul><li>没有 key 值时将会原地复用</li><li><span style="color:red;">vue 有没有这个问题？</span></li></ul><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2><h3 id="父子通信" tabindex="-1"><a class="header-anchor" href="#父子通信" aria-hidden="true">#</a> 父子通信</h3><ul><li>props</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>class Parent extends React.Component{\n    xxx = ()=&gt;{\n        console.log(&quot;父组件函数&quot;)\n    }\n    &lt;div&gt;\n        // 父传子\n        &lt;Son xxx={this.xxx} /&gt;\n    &lt;/div&gt;\n}\n\nclass Son extends React.Component{\n    state = { msg: &#39;子组件数据&#39; }\n\n    sendmsg = ()=&gt;{\n        // 子穿父\n        this.props.xxx(this.state.msg)\n    }\n    &lt;div&gt;\n        &lt;button onClick={this.sendmsg}&gt;点击&lt;/button&gt;\n    &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="兄弟组件通信" tabindex="-1"><a class="header-anchor" href="#兄弟组件通信" aria-hidden="true">#</a> 兄弟组件通信</h3><ul><li>PubSub</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>class Parent extends React.Component{\n    xxx = ()=&gt;{\n        console.log(&quot;父组件函数&quot;)\n    }\n    &lt;div&gt;\n        &lt;Son1 xxx={this.xxx} /&gt;\n        &lt;Son2 xxx={this.xxx} /&gt;\n    &lt;/div&gt;\n}\n\nclass Son1 extends React.Component{\n    state = { msg: &#39;son1组件数据&#39; }\n    sendmsg = (){\n        PubSub.publish(&#39;xxx&#39;, this.state.msg) // 触发xxx事件\n    }\n    &lt;div&gt;\n        &lt;button onClick={this.sendmsg}&gt;点击&lt;/button&gt;\n    &lt;/div&gt;\n}\n\nclass Son2 extends React.Component{\n    componentDidMount(){\n        PubSub.subscribe(&#39;xxx&#39;, (msg)=&gt;{ // 订阅xxx事件\n            console.log(msg)\n        })\n    }\n    &lt;div&gt;\n        &lt;button onClick={this.sendmsg}&gt;点击&lt;/button&gt;\n    &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="csstransition" tabindex="-1"><a class="header-anchor" href="#csstransition" aria-hidden="true">#</a> CSSTransition</h2><ul><li>timeout 动画执行时间，毫秒数</li><li>className 修改类名</li><li>appear 第一次是否触发</li><li>in</li><li>onEnter 入场时触发回调</li><li>onEntering 入场中触发回调</li><li>onEntered 入场结束时触发回调</li><li>onExit 退场时触发回调</li><li>onExiting 退场中触发回调</li><li>onExited 退场结束时触发回调</li></ul><h3 id="css-类名" tabindex="-1"><a class="header-anchor" href="#css-类名" aria-hidden="true">#</a> css 类名</h3><ul><li>.enter 动画刚入场时</li><li>.enter-active 动画入场中</li><li>.enter-done 动画入场结束时</li><li>.exit 动画刚退场时</li><li>.exit-active 动画退场中</li><li>.exit-done 动画退场结束时</li></ul><h3 id="transitiongroup" tabindex="-1"><a class="header-anchor" href="#transitiongroup" aria-hidden="true">#</a> TransitionGroup</h3><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>&lt;TransitionGroup&gt;\n  &lt;CSSTransition&gt;&lt;/CSSTransition&gt;\n  &lt;CSSTransition&gt;&lt;/CSSTransition&gt;\n&lt;/TransitionGroup&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="脚手架" tabindex="-1"><a class="header-anchor" href="#脚手架" aria-hidden="true">#</a> 脚手架</h2><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><ul><li>路由组件中的 props 下存在的属性 <ul><li>history 存放跳转路径的方法</li><li>location 存放数据</li><li>match 解析路径得到的数据</li></ul></li></ul><h3 id="navlink-和-route" tabindex="-1"><a class="header-anchor" href="#navlink-和-route" aria-hidden="true">#</a> NavLink 和 Route</h3><ul><li>默认是模糊匹配</li><li>加上 exact 精准匹配</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>&lt;NavLink to=&#39;/home&#39;&gt;首页&lt;/NavLink&gt;\n// /home会匹配/和/home\n&lt;Route path=&quot;/home&quot; component={Home}&gt;&lt;/Route&gt;\n&lt;Route path=&quot;/&quot; component={Root}&gt;&lt;/Route&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Switch 中的 Route 都是精准匹配</li><li>&#39;/home&#39;将无法匹配到&#39;/&#39;</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>&lt;NavLink to=&#39;/home&#39;&gt;首页&lt;/NavLink&gt;\n&lt;Switch&gt;\n  &lt;Route path=&quot;/home&quot; component={Home}&gt;&lt;/Route&gt;\n  &lt;Route path=&quot;/&quot; component={Root}&gt;&lt;/Route&gt;\n&lt;/Switch&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="route-的三种渲染方式" tabindex="-1"><a class="header-anchor" href="#route-的三种渲染方式" aria-hidden="true">#</a> Route 的三种渲染方式</h4><ul><li>方式 <ul><li>children 不管 location 是否匹配都会渲染</li><li>component</li><li>render</li></ul></li><li>优先级 children&gt;component&gt;render</li><li>特性 <ul><li>互斥的，只会渲染其中一个</li></ul></li></ul><h3 id="redirect" tabindex="-1"><a class="header-anchor" href="#redirect" aria-hidden="true">#</a> Redirect</h3><ul><li>路径的重定向</li><li>当前路径匹配不到时走 Redirect 设置的路径</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>&lt;NavLink to=&#39;/home&#39;&gt;首页&lt;/NavLink&gt;\n&lt;Switch&gt;\n  &lt;Route path=&quot;/home&quot; component={Home}&gt;&lt;/Route&gt;\n  &lt;Route path=&quot;/&quot; component={Root}&gt;&lt;/Route&gt;\n  &lt;Redirect to=&quot;/home&quot;&gt;&lt;/Redirect&gt;\n&lt;/Switch&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h3><ul><li>this.props.history.push</li><li>this.props.history.replace</li><li>goForward 前进到回到刚才回退前的路径</li><li>goBack 返回历史记录中的上一个路径</li><li>go(num) 前进 num 次回退历史记录的路径</li></ul><h4 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h4><p>push 跳转路径是在原来的历史记录中叠加，回退时能回到 push 前的路径</p><h4 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h4><p>replace 跳转路径是替换当前的路径，上一次的路径直接被覆盖，无法回退到 replac 前的路径</p><h2 id="redux" tabindex="-1"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> Redux</h2><ul><li>store.js <ul><li>createStore 创建仓库</li><li>applyMiddleware 使用中间件</li><li>thunk 异步处理事件</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { createStore, applyMiddleware } from &quot;redux&quot;;\nimport thunk from &quot;redux-thunk&quot;;\nimport reducer from &quot;./reducer&quot;;\nexport default createStore(reducer, applyMiddleware(thunk));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>reducer.js</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>export default function (state = 0, action){\n  switch(action.type) {\n    case &#39;ADD&#39;: return state + action.data\n    default return state\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>action.js <ul><li>dispatch 发起动作</li><li>同步动作返回对象</li><li>异步动作返回函数 <ul><li>dispatch 为 thunk 中间件默认传入</li><li>在返回的函数中做异步请求</li></ul></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>export function addAtion (value) =&gt; { type: &#39;ADD&#39;, data: velue }\nexport function addAsyncAtion (value) {\n  return dispatch =&gt; {\n    setTimeout(()=&gt;{\n      dispatch(addAtion(value))\n    }, 2000)\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> react-redux</h2><ul><li>reducer.js 返回多个 reducer</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { combineReducers } from &quot;redux&quot;;\nfunction number(state = 0, action) {\n  return state;\n}\nfunction sum(state = 0, action) {\n  return state;\n}\nexport default combineReducers({\n  number,\n  sum,\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>组件中接收</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>export default connect(\n  (state) =&gt; ({\n    number,\n    sum,\n  }),\n  {\n    addFn,\n    deleteFn,\n  }\n)(App);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="高阶组件" tabindex="-1"><a class="header-anchor" href="#高阶组件" aria-hidden="true">#</a> 高阶组件</h2><ul><li>接收一个组件，返回一个处理后的组件</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>function HighComponent(BaseComponent) {\n  return class extends Component {\n    state = { value: &quot;&quot; };\n    handleChange = (e) =&gt; {\n      this.setState({ value: e.target.value });\n    };\n    render() {\n      const props = {\n        value: this.state.value,\n        onChange: this.handleChange,\n        ...this.props, // 将创建的组件的属性传递到Base组件中\n      };\n      return &lt;BaseComponent {...props} /&gt;;\n    }\n  };\n}\nfunction Demo() {\n  return &lt;input type=&quot;text&quot; {...this.props} /&gt;;\n}\nconst Test = HighComponent(Demo);\n&lt;Test data={data} /&gt;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>函数组件写法</li><li>使用装饰器写法</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>function HighComponent(BaseComponent) {\n  return function (props) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;高阶组件装饰&lt;/p&gt;\n        &lt;BaseComponent {...props} /&gt;\n      &lt;/div&gt;\n    );\n  };\n}\n@HighComponent\nclass Demo extends Component {\n  render() {\n    return &lt;div&gt;{this.props.data}&lt;/div&gt;;\n  }\n}\n&lt;Demo data={data} /&gt;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="反向继承" tabindex="-1"><a class="header-anchor" href="#反向继承" aria-hidden="true">#</a> 反向继承</h3><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>class BaseComponent extends Component {\n  state = {\n    value: &quot;基础组件的默认数据&quot;,\n  };\n  render() {\n    return &lt;div&gt;{this.state.value}&lt;/div&gt;;\n  }\n}\n\nfunction ReverseInheritance() {\n  return class extends BaseComponent {\n    render() {\n      // 返回父组件的render函数执行结果\n      return super.render();\n    }\n  };\n}\n\nconst Demo = ReverseInheritance();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="hook-函数" tabindex="-1"><a class="header-anchor" href="#hook-函数" aria-hidden="true">#</a> Hook 函数</h2><ul><li>使用条件 <ul><li>只能在函数的最外层调用 hook，不能在循环、条件判断、自函数中调用</li><li>只能在函数中调用</li></ul></li></ul><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><ul><li>useState 的顺序不能改变，否则会报错</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { useState } from &quot;react&quot;;\nfunction User() {\n  const [value, setValue] = useState(&quot;hook数据&quot;);\n  const [value1, setValue1] = useState(&quot;hook数据1&quot;);\n  function hanldeClick() {\n    setValue(&quot;修改hook数据&quot;);\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;User&lt;/h1&gt;\n      &lt;p&gt;{value}&lt;/p&gt;\n      &lt;button onClick={hanldeClick}&gt;修改value&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><ul><li>创建标记对象</li></ul><h3 id="useeffect-return" tabindex="-1"><a class="header-anchor" href="#useeffect-return" aria-hidden="true">#</a> useEffect(()=&gt;{ return }, [])</h3><ul><li><p>合并了类组件的生命周期函数</p></li><li><p>当 render 渲染之后执行，dom 已经生成，此时执行时间时间类似 componentDidMount</p></li><li><p>数据变化时，先执行 useEffect 的回调函数，在执行 render 渲染，此时执行时间类似 componentDidUpdate</p></li><li><p>第一次进入组件的时候就会执行</p></li><li><p>做数据处理和操作 DOM 元素</p></li><li><p>返回函数，作用类似 componentDidUnmount</p><ul><li>返回的函数会先于 useEffect 的回调函数执行，清除定时器</li><li>不过现在即使不写返回函数清除定时器，也不会出现颜色一直变的问题，可能是 react 的 useEffect 内部做了处理？</li></ul></li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { useState, useEffect } from &quot;react&quot;;\nfunction About() {\n  const [background, setColor] = useState(&quot;red&quot;);\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n      const color = &quot;#&quot; + Math.random().toString(16).slice(2, 8);\n      setColor(color);\n    }, 1000);\n    return () =&gt; {\n      clearTimeout(timer);\n    };\n  });\n  return &lt;div style={{ width: 100, height: 100, background }}&gt;&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>第二个参数 数组 <ul><li>限制 useEffect 执行的时机</li><li>当传递的数据变化时，执行 useEffect，若没有，则不执行</li><li>传空数组，useEffect 的回调只会执行一次，因为没有关联改变的数据去触发它，此时相当于 componentDidMount 钩子</li></ul></li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { useState, useEffect } from &quot;react&quot;;\nfunction About() {\n  const [background, setColor] = useState(&quot;red&quot;);\n  useEffect(() =&gt; {\n    setTimeout(() =&gt; {\n      const color = &quot;#&quot; + Math.random().toString(16).slice(2, 8);\n      setColor(color);\n    }, 1000);\n  }, []);\n  return &lt;div style={{ width: 100, height: 100, background }}&gt;&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="usereeducer-reducer-state" tabindex="-1"><a class="header-anchor" href="#usereeducer-reducer-state" aria-hidden="true">#</a> useReeducer(reducer, state)</h3><ul><li>reducer 函数不会初始化</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { useReducer } from &quot;react&quot;;\nconst state = 0;\nfunction reducer(state, action) {\n  switch (action.type) {\n    case &quot;add&quot;:\n      return state + action.data;\n    case &quot;minus&quot;:\n      return state - action.data;\n  }\n}\nexport default function SetTimeout() {\n  const [count, dispatch] = useReducer(reducer, state);\n  function add() {\n    dispatch({ type: &quot;add&quot;, data: 1 });\n  }\n  function minus() {\n    dispatch({ type: &quot;minus&quot;, data: 1 });\n  }\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n      &lt;button onClick={add}&gt;add&lt;/button&gt;\n      &lt;button onClick={minus}&gt;minus&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="usememo-return" tabindex="-1"><a class="header-anchor" href="#usememo-return" aria-hidden="true">#</a> useMemo(()=&gt;{ return }, [])</h3><ul><li>类似 vue 的计算属性 computed</li><li>当依赖项发生改变时才会重新执行函数</li><li>避免每次 render 时产生不必要的开销</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { useMemo, useState } from &quot;react&quot;;\n\nexport function UseFunComponent() {\n  let [len, setLen] = useState(5);\n  let [other, setOther] = useState(0);\n\n  const memoData = useMemo(() =&gt; {\n    console.log(&quot;memoData&quot;);\n    let count = 0;\n    for (let i = 1; i &lt;= len; i++) {\n      count++;\n    }\n    return count;\n  }, [len]);\n\n  function fnData() {\n    console.log(&quot;fnData&quot;);\n    let count = 0;\n    for (let i = 1; i &lt;= len; i++) {\n      count++;\n    }\n    return count;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;与len无关的数据：{other} &lt;/p&gt;\n      &lt;p&gt;\n        与len有关的数据： {fnData()} - {memoData}\n      &lt;/p&gt;\n      {/* 不使用useMemo，不管什么数据的改变都会导致fnData函数重新执行 */}\n      &lt;p&gt;函数执行返回的数据: {fnData()}&lt;/p&gt;\n      {/* 无关数据变化不会重新执行memoData的计算函数； */}\n      &lt;p&gt;使用useMemo返回的数据: {memoData}&lt;/p&gt;\n      &lt;button\n        onClick={() =&gt; {\n          setOther(other++);\n        }}\n      &gt;\n        改变与len无关的数据\n      &lt;/button&gt;\n      &lt;button\n        onClick={() =&gt; {\n          setLen(len++);\n        }}\n      &gt;\n        改变与len有关的数据\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h3><h3 id="自定义-hook-函数" tabindex="-1"><a class="header-anchor" href="#自定义-hook-函数" aria-hidden="true">#</a> 自定义 hook 函数</h3><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><ul><li>createContext() 创建 Context 对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { createContext } from &quot;react&quot;;\nexport const Context = createContext();\nexport const Provider = Context.Provider;\nexport const Provider = Context.Provider;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>使用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import FnContext from &quot;./components/fnContext&quot;;\nimport ClassContext from &quot;./components/classContext&quot;;\nimport { Context, Provider } from &quot;./hook&quot;;\nexport default function Home() {\n  const data = &quot;home组件的数据&quot;;\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Context应用：&lt;/p&gt;\n      &lt;Provider value={data}&gt;\n        函数组件接收：\n        &lt;FnContext /&gt;\n      &lt;/Provider&gt;\n      &lt;hr /&gt;\n      &lt;Provider value={data}&gt;\n        类组件接收：\n        &lt;ClassContext /&gt;\n      &lt;/Provider&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h3><ul><li>必须使用函数组件接收</li></ul><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { useContext } from &quot;react&quot;;\nimport { Context } from &quot;../../hook/context&quot;;\nexport default function UseContext() {\n  const data = useContext(Context);\n  return &lt;div&gt;useContext接收数据----{data}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="contexttype" tabindex="-1"><a class="header-anchor" href="#contexttype" aria-hidden="true">#</a> contextType</h3><ul><li>必须使用类组件接收</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { Component } from &quot;react&quot;;\nimport { Context } from &quot;../../hook/context&quot;;\nexport default class UseContext extends Component {\n  static contextType = Context;\n  render() {\n    return &lt;div&gt;contextType接收数据 ---- {this.context}&lt;/div&gt;;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer" aria-hidden="true">#</a> Consumer</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import { Consumer } from &quot;../../hook/context&quot;;\nexport default function ContextConsumer() {\n  return (\n    &lt;div&gt;\n      &lt;Consumer&gt;{(data) =&gt; &lt;span&gt;Consumer接收数据 ----{data}&lt;/span&gt;}&lt;/Consumer&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><h2 id="purecomponent" tabindex="-1"><a class="header-anchor" href="#purecomponent" aria-hidden="true">#</a> PureComponent</h2><blockquote><p>数据不发生变化时不重新渲染组件</p></blockquote><ul><li>只能用于 class 组件</li><li>浅比较，对象下的属性无法比较</li></ul><p>继承 PureComponent 之后，点击 button 只会执行一次；若继承 Component 每次 setState 都会执行 render 重新渲染，需要在 shouldComponentUpdate 钩子中处理</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { PureComponent } from &quot;react&quot;;\nexport default class OptimizationComponent extends PureComponent {\n  state = { count: 0 };\n  add = () =&gt; {\n    this.setState(\n      {\n        count: 100,\n      },\n      () =&gt; {\n        console.log(&quot;count:&quot;, this.state.count);\n      }\n    );\n  };\n  render() {\n    console.log(&quot;render&quot;);\n    const { count } = this.state;\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.add}&gt;count: {count}&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>继承 Component 使用 shouldComponentUpdate 优化；当新的值与老的值不相等时才执行 render 函数重新渲染组件</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>import { PureComponent } from &quot;react&quot;;\nexport default class OptimizationComponent extends PureComponent {\n  state = { count: 0 };\n  add = () =&gt; {\n    this.setState(\n      {\n        count: 100,\n      },\n      () =&gt; {\n        console.log(&quot;count:&quot;, this.state.count);\n      }\n    );\n  };\n  shouldComponentUpdate(nextProps, nextState) {\n    // 新的props，新的state\n    return nextState.count !== this.state.count;\n  }\n  render() {\n    console.log(&quot;render&quot;);\n    const { count } = this.state;\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.add}&gt;count: {count}&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="组件库" tabindex="-1"><a class="header-anchor" href="#组件库" aria-hidden="true">#</a> 组件库</h2><h3 id="antd" tabindex="-1"><a class="header-anchor" href="#antd" aria-hidden="true">#</a> antd</h3><ul><li>按需加载</li></ul>',109),l={},r=(0,e(3744).Z)(l,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);