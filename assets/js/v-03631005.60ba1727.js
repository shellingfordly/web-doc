"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[446],{1210:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-03631005",path:"/frame/react/problem.html",title:"问题",lang:"en-US",frontmatter:{categories:["frame","react"]},excerpt:"",headers:[{level:2,title:"函数组件请求数据",slug:"函数组件请求数据",children:[]},{level:2,title:"自定义 hook 函数一直被执行问题",slug:"自定义-hook-函数一直被执行问题",children:[]}]}},2927:(n,s,e)=>{e.r(s),e.d(s,{default:()=>r});const a=(0,e(6252).uE)('<h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h1><h2 id="函数组件请求数据" tabindex="-1"><a class="header-anchor" href="#函数组件请求数据" aria-hidden="true">#</a> 函数组件请求数据</h2><p>问题：在函数组件中请求数据，API.UserListAll 被一直不停的调用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>export default function UserPower() {\n  const [tableData, setTableData] = useState([]);\n  window.API.UserListAll({\n    offset: 0,\n    count: 100,\n  }).then((users) =&gt; {\n    setTableData(users);\n  });\n\n  return &lt;&gt;{tableData}&lt;/&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>自我猜测：setTableData 改变了渲染用到的数据，因此再次触发 UserPower render，无限循环。 思考: 怎么在函数组件中只请求第一次，函数组件没有生命周期，难道只能用 class 组件来写吗</p><p>解决方法：</p><p>方案一：使用 useEffect</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>useEffect(() =&gt; {\n  setLoading(true);\n  (async () =&gt; {\n    const res = await window.API.UserListAll&lt;API.RequestData, API.UserInfo[]&gt;({\n      offset: 0,\n      count: 100,\n    });\n    setTableData(data);\n    setLoading(false);\n  })();\n}, []);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="自定义-hook-函数一直被执行问题" tabindex="-1"><a class="header-anchor" href="#自定义-hook-函数一直被执行问题" aria-hidden="true">#</a> 自定义 hook 函数一直被执行问题</h2><ol><li>场景</li></ol><p>自定义 hook 中获取数据，到父组件中初始化数据，在子孙组件中使用</p><ol start="2"><li>问题</li></ol><p>自定义 hook 函数会被循环执行</p><ul><li>自定义 useContext</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>import { useState } from &quot;react&quot;;\nimport { createContext } from &quot;react&quot;;\nimport { API } from &quot;/src/api&quot;;\nexport const Context = createContext(0);\nexport function useContext(): [number, (id: number) =&gt; Promise&lt;void&gt;] {\n  const [state, setState] = useState&lt;StateModel&gt;(0);\n  const setData = async (id: number) =&gt; {\n    const res = await API({\n      id,\n    });\n    setState(res);\n  };\n  return [state, setData];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>父组件 Parent 中使用自定义 hook 创建初始数据</li></ul><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>import { Context } from &quot;./hooks/useContext&quot;;\nimport { useEffect } from &quot;react&quot;;\nexport function Parent() {\n  // useContext会被循环执行，导致接口一直被请求\n  const [state, setState] = useContext(0);\n  useEffect(() =&gt; {\n    setState(0);\n  }, []);\n  return (\n    &lt;Context.Provider value={state}&gt;\n      &lt;Son1 /&gt;\n      &lt;Son2 /&gt;\n    &lt;/Context.Provider&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>子组件 Son1 中使用 context</li></ul><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>import { Context } from &quot;./hooks/useContext&quot;;\nimport { useEffect, useContext } from &quot;react&quot;;\nexport function Son1() {\n  const context = useContext(Context);\n  useEffect(() =&gt; {\n    setState(0);\n  }, []);\n  return &lt;div&gt;Son1 context: {context}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>子组件 Son2 中使用 context</li></ul><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>import { Context } from &quot;./hooks/useContext&quot;;\nimport { useEffect, useContext } from &quot;react&quot;;\nexport function Son2() {\n  const context = useContext(Context);\n  useEffect(() =&gt; {\n    setState(0);\n  }, []);\n  return &lt;div&gt;Son2 context: {context}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',21),t={},r=(0,e(3744).Z)(t,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);